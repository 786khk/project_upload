git 과제


1. 일반현상 관리툴과 차이점
방식이 다름.
중앙집중형 방식과 분산ㄱ솬리방식.

2.


3.기본 명령어
git --version 
git init == 현재 디렉토리에 git저장소 생성
git add 파일이름 
add - 1. untracked files의 파일들을 git가 추적
    - 2. 수정했지만 아직 스테이징 영역에 올라가지 않은(Changed but not updated) 파일들을 스테이징 영역에 올림
    = -i옵션은 대화형모드 시작, 일부만 스테이징 가능
     -p 옵션은 -i대화형모드 없이 바로 패치모드 사용


git commit -m == 커밋 메세지
스테이징 영역에 올라간 파일 커밋.
-m은 커밋 메세지를 주는 옵션, 여러 줄의 커밋을 쓸경우 -m을 여러개 씀
            -c HEAD -a -ammend
            진정한 커밋의 로그메세지 다시 사용해 기존 커밋을 수정. -c를 사용하면 기존메세지 수정
git status == 커밋되지않은 변경사항 조회
git status 커밋되지않은 변경사항을 조회
git diff 스테이징 영역, 현재 작업트리의 차이.
         --cached == 스테이징과 저장소의 차이
         HAED == 저장소, 스테이지영역, 작업트리의 차이점을 봄. 파라미터와 동일하게 범위지정가능, --stat를 추가하면 변경사항 통계를 볼 수 있음.
git mv 파일명 새 파일명 == 기존 존재하는 파일을 새 파일로 이동 변경이력 그대로 유지
git check out --파일명 == 아직 스테이징이나 커밋을 하지않은파일 변경내용 취소하고 이전 커밋상태로 돌림. (svn에서 revert와 동일)

이외 명령어들은 
https://blog.outsider.ne.kr/572 참고
4. conflict 예제생성/해결/정리

5. 히스토리 보는 법

6. git 고급기능

7. merge request 가능확인
8. issue 기능 확인
